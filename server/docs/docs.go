// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/course/create": {
            "post": {
                "description": "Creating a Course",
                "produces": [
                    "application/json"
                ],
                "summary": "By Admin only: Create Course",
                "parameters": [
                    {
                        "description": "course JSON data",
                        "name": "Course",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateCoursesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/course/create/video": {
            "post": {
                "description": "Creating a Video",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "By Admin only: Create Video",
                "parameters": [
                    {
                        "type": "file",
                        "description": "videoSrc",
                        "name": "Course",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/courses": {
            "get": {
                "description": "Get all current courses in the Database.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all Courses",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/courses/{name}": {
            "delete": {
                "description": "Delete Course from Db based on name.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Course based on name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/subscriber": {
            "post": {
                "description": "Creating a Subscriber in MongoDB",
                "produces": [
                    "application/json"
                ],
                "summary": "Subscribe",
                "parameters": [
                    {
                        "description": "subscriber",
                        "name": "Subscriber",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.GetSubscriberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Unsubscribe",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Subscriber",
                "parameters": [
                    {
                        "description": "email",
                        "name": "Subscriber",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.GetSubscriberRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/subscribers": {
            "get": {
                "description": "Get all current subscribers in my Database.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get subscriber's list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/subscribers/notify": {
            "get": {
                "description": "Notify users",
                "produces": [
                    "application/json"
                ],
                "summary": "Get subscriber's list",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/testcase": {
            "get": {
                "description": "Get all current testCases in the Database.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all TestCases",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/testcase/create": {
            "post": {
                "description": "Creating a TestCase",
                "produces": [
                    "application/json"
                ],
                "summary": "By Admin only: Create TestCase",
                "parameters": [
                    {
                        "description": "testCase",
                        "name": "TestCases",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateTestCasesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/testcase/{qnid}": {
            "get": {
                "description": "get a testCase from Db",
                "produces": [
                    "application/json"
                ],
                "summary": "Get testCase",
                "parameters": [
                    {
                        "type": "string",
                        "description": "qnid",
                        "name": "qnid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete TestCase from Db based on qnid.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete TestCase based on qnid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "qnid",
                        "name": "qnid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/tutorials": {
            "get": {
                "description": "Get all current questions in the Database.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all Tutorial Questions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/tutorials/code/attempt": {
            "get": {
                "description": "Get all current attempts in the Database.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all Attempts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/tutorials/code/attempt/create": {
            "post": {
                "description": "Creating Attempt",
                "produces": [
                    "application/json"
                ],
                "summary": "Save Attempt",
                "parameters": [
                    {
                        "description": "attempt",
                        "name": "Attempt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateAttemptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/tutorials/code/attempt/status/{qnid}/{language}/{username}": {
            "put": {
                "description": "Update Status's data in Db.",
                "produces": [
                    "application/json"
                ],
                "summary": "Update Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "qnid",
                        "name": "qnid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "language",
                        "name": "language",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "attempt",
                        "name": "Attempt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateAttemptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/tutorials/code/attempt/{qnid}/{language}/{username}": {
            "get": {
                "description": "get Attempt from Db filtered by username and qnid",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Attempt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "qnid",
                        "name": "qnid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "language",
                        "name": "language",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Edit attempt's data in Db.",
                "produces": [
                    "application/json"
                ],
                "summary": "Edit Attempt",
                "parameters": [
                    {
                        "type": "string",
                        "description": "qnid",
                        "name": "qnid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "language",
                        "name": "language",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "attempt",
                        "name": "Attempt",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.UpdateAttemptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/tutorials/code/check/{username}": {
            "get": {
                "description": "Get all current attempts in the Database.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all Attempts by a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/tutorials/code/create": {
            "post": {
                "description": "Creating a Question",
                "produces": [
                    "application/json"
                ],
                "summary": "By Admin only: Create Tutorial Question",
                "parameters": [
                    {
                        "description": "question",
                        "name": "Question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateQuestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/tutorials/code/{qnid}": {
            "get": {
                "description": "get a question from Db",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Question",
                "parameters": [
                    {
                        "type": "string",
                        "description": "qnid",
                        "name": "qnid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            },
            "put": {
                "description": "Edit question's data in Db.",
                "produces": [
                    "application/json"
                ],
                "summary": "Edit Question",
                "parameters": [
                    {
                        "description": "tutorial",
                        "name": "Question",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.EditAQuestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Question from Db based on qnid.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete Question based on qnid",
                "parameters": [
                    {
                        "type": "string",
                        "description": "qnid",
                        "name": "qnid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Creating a User Data in MongoDB. UserName as Key",
                "produces": [
                    "application/json"
                ],
                "summary": "Create User/ Sign Up for account",
                "parameters": [
                    {
                        "description": "user",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.CreateUsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticate a user by username and password",
                "produces": [
                    "application/json"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "username, password",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.UserResponse"
                        }
                    }
                }
            }
        },
        "/user/{userId}": {
            "put": {
                "description": "Edit user's data in Db.",
                "produces": [
                    "application/json"
                ],
                "summary": "Edit User",
                "parameters": [
                    {
                        "description": "user",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.EditUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete User from Db.",
                "produces": [
                    "application/json"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "description": "userId",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.GetUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/user/{userName}": {
            "get": {
                "description": "get a user data from Db. Checks both username and Password",
                "produces": [
                    "application/json"
                ],
                "summary": "Get User / login",
                "parameters": [
                    {
                        "description": "username, password",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.GetUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all current users in my Database.",
                "produces": [
                    "application/json"
                ],
                "summary": "Get all Users",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/responses.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "requests.CreateAttemptRequest": {
            "type": "object",
            "required": [
                "attempt",
                "language",
                "memory",
                "qnid",
                "speed",
                "status",
                "username"
            ],
            "properties": {
                "attempt": {
                    "type": "string"
                },
                "language": {
                    "type": "integer"
                },
                "memory": {
                    "type": "integer"
                },
                "qnid": {
                    "description": "Id        primitive.ObjectID ` + "`" + `json:\"id,omitempty\"` + "`" + `",
                    "type": "string"
                },
                "speed": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "requests.CreateCoursesRequest": {
            "type": "object",
            "required": [
                "duration",
                "materialDescription",
                "materialSrc",
                "name",
                "status",
                "sypnopsis",
                "videoDescription"
            ],
            "properties": {
                "duration": {
                    "type": "string"
                },
                "materialDescription": {
                    "type": "string"
                },
                "materialSrc": {
                    "type": "string"
                },
                "name": {
                    "description": "Id        primitive.ObjectID ` + "`" + `json:\"id,omitempty\"` + "`" + `",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "sypnopsis": {
                    "type": "string"
                },
                "videoDescription": {
                    "description": "VideoSrc            []byte ` + "`" + `json:\"videoSrc,omitempty\" validate:\"required\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "requests.CreateQuestionRequest": {
            "type": "object",
            "required": [
                "constraints",
                "description",
                "examples",
                "name",
                "qnid",
                "status",
                "tags"
            ],
            "properties": {
                "constraints": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "examples": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "qnid": {
                    "description": "Id        primitive.ObjectID ` + "`" + `json:\"id,omitempty\"` + "`" + `",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "string"
                }
            }
        },
        "requests.CreateTestCasesRequest": {
            "type": "object",
            "required": [
                "hiddentestcases",
                "qnid",
                "testcases"
            ],
            "properties": {
                "hiddentestcases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.SingleTestCase"
                    }
                },
                "qnid": {
                    "type": "string"
                },
                "testcases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/requests.SingleTestCase"
                    }
                }
            }
        },
        "requests.CreateUsersRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "title"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "description": "Id        primitive.ObjectID ` + "`" + `json:\"id,omitempty\"` + "`" + `",
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "userName": {
                    "type": "string"
                }
            }
        },
        "requests.EditAQuestionRequest": {
            "type": "object",
            "required": [
                "constraints",
                "description",
                "examples",
                "name",
                "qnid",
                "status",
                "tags"
            ],
            "properties": {
                "constraints": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "examples": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "qnid": {
                    "description": "Id        primitive.ObjectID ` + "`" + `json:\"id,omitempty\"` + "`" + `",
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tags": {
                    "type": "string"
                }
            }
        },
        "requests.EditUserRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "title"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "maxLength": 200,
                    "minLength": 1
                },
                "password": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "requests.GetSubscriberRequest": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "description": "Id primitive.ObjectID ` + "`" + `json:\"id,omitempty\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "requests.GetUserRequest": {
            "type": "object",
            "required": [
                "password",
                "userName"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "userName": {
                    "description": "Id primitive.ObjectID ` + "`" + `json:\"id,omitempty\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "requests.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "userName"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "userName": {
                    "description": "Id primitive.ObjectID ` + "`" + `json:\"id,omitempty\"` + "`" + `",
                    "type": "string"
                }
            }
        },
        "requests.SingleTestCase": {
            "type": "object",
            "properties": {
                "input": {
                    "description": "Define fields for each test case\nFor example:",
                    "type": "string"
                },
                "output": {
                    "type": "string"
                }
            }
        },
        "requests.UpdateAttemptRequest": {
            "type": "object",
            "required": [
                "attempt",
                "language",
                "memory",
                "qnid",
                "speed",
                "status",
                "username"
            ],
            "properties": {
                "attempt": {
                    "type": "string"
                },
                "language": {
                    "type": "integer"
                },
                "memory": {
                    "type": "integer"
                },
                "qnid": {
                    "description": "Id       primitive.ObjectID ` + "`" + `json:\"id,omitempty\"` + "`" + `",
                    "type": "string"
                },
                "speed": {
                    "type": "number"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "responses.Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "status": {
                    "type": "string"
                }
            }
        },
        "responses.UserResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Service API",
	Description:      "Service API in Go using Gin framework",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
