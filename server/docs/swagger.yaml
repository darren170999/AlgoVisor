basePath: /api
definitions:
  requests.CreateAttemptRequest:
    properties:
      attempt:
        type: string
      language:
        type: string
      qnid:
        description: Id        primitive.ObjectID `json:"id,omitempty"`
        type: string
      status:
        type: string
      username:
        type: string
    required:
    - attempt
    - language
    - qnid
    - status
    - username
    type: object
  requests.CreateCoursesRequest:
    properties:
      duration:
        type: string
      materialDescription:
        type: string
      materialSrc:
        type: string
      name:
        description: Id        primitive.ObjectID `json:"id,omitempty"`
        type: string
      status:
        type: string
      sypnopsis:
        type: string
      videoDescription:
        type: string
      videoSrc:
        type: string
    required:
    - duration
    - materialDescription
    - materialSrc
    - name
    - status
    - sypnopsis
    - videoDescription
    - videoSrc
    type: object
  requests.CreateQuestionRequest:
    properties:
      constraints:
        type: string
      description:
        type: string
      examples:
        type: string
      name:
        type: string
      qnid:
        description: Id        primitive.ObjectID `json:"id,omitempty"`
        type: string
      status:
        type: string
      tags:
        type: string
    required:
    - constraints
    - description
    - examples
    - name
    - qnid
    - status
    - tags
    type: object
  requests.CreateTestCasesRequest:
    properties:
      qnid:
        type: string
      testcases:
        items:
          $ref: '#/definitions/requests.SingleTestCase'
        type: array
    required:
    - qnid
    - testcases
    type: object
  requests.CreateUsersRequest:
    properties:
      email:
        type: string
      name:
        description: Id        primitive.ObjectID `json:"id,omitempty"`
        type: string
      password:
        type: string
      title:
        type: string
      userName:
        type: string
    required:
    - email
    - name
    - password
    - title
    type: object
  requests.EditAQuestionRequest:
    properties:
      constraints:
        type: string
      description:
        type: string
      examples:
        type: string
      name:
        type: string
      qnid:
        description: Id        primitive.ObjectID `json:"id,omitempty"`
        type: string
      status:
        type: string
      tags:
        type: string
    required:
    - constraints
    - description
    - examples
    - name
    - qnid
    - status
    - tags
    type: object
  requests.EditUserRequest:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        maxLength: 200
        minLength: 1
        type: string
      password:
        type: string
      title:
        type: string
    required:
    - email
    - name
    - password
    - title
    type: object
  requests.GetUserRequest:
    properties:
      password:
        type: string
      userName:
        description: Id primitive.ObjectID `json:"id,omitempty"`
        type: string
    required:
    - password
    - userName
    type: object
  requests.LoginRequest:
    properties:
      password:
        type: string
      userName:
        description: Id primitive.ObjectID `json:"id,omitempty"`
        type: string
    required:
    - password
    - userName
    type: object
  requests.SingleTestCase:
    properties:
      input:
        description: |-
          Define fields for each test case
          For example:
        type: string
      output:
        type: string
    type: object
  requests.UpdateAttemptRequest:
    properties:
      attempt:
        type: string
      language:
        type: string
      qnid:
        description: Id       primitive.ObjectID `json:"id,omitempty"`
        type: string
      status:
        type: string
      username:
        type: string
    required:
    - attempt
    - language
    - qnid
    - status
    - username
    type: object
  responses.Response:
    properties:
      code:
        type: integer
      data: {}
      status:
        type: string
    type: object
  responses.UserResponse:
    properties:
      data:
        additionalProperties: true
        type: object
      message:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: Service API in Go using Gin framework
  title: Service API
  version: "1.0"
paths:
  /course:
    post:
      description: Creating a Course
      parameters:
      - description: course
        in: body
        name: Course
        required: true
        schema:
          $ref: '#/definitions/requests.CreateCoursesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: 'By Admin only: Create Course'
  /courses:
    get:
      description: Get all current courses in the Database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get all Courses
  /testcase:
    get:
      description: Get all current testCases in the Database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get all TestCases
  /testcase/{qnid}:
    delete:
      description: Delete TestCase from Db based on qnid.
      parameters:
      - description: qnid
        in: path
        name: qnid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Delete TestCase based on qnid
    get:
      description: get a testCase from Db
      parameters:
      - description: qnid
        in: path
        name: qnid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get testCase
  /testcase/create:
    post:
      description: Creating a TestCase
      parameters:
      - description: testCase
        in: body
        name: TestCases
        required: true
        schema:
          $ref: '#/definitions/requests.CreateTestCasesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: 'By Admin only: Create TestCase'
  /tutorials:
    get:
      description: Get all current questions in the Database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get all Tutorial Questions
  /tutorials/code/{qnid}:
    delete:
      description: Delete Question from Db based on qnid.
      parameters:
      - description: qnid
        in: path
        name: qnid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Delete Question based on qnid
    get:
      description: get a question from Db
      parameters:
      - description: qnid
        in: path
        name: qnid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Question
    put:
      description: Edit question's data in Db.
      parameters:
      - description: tutorial
        in: body
        name: Question
        required: true
        schema:
          $ref: '#/definitions/requests.EditAQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Edit Question
  /tutorials/code/attempt:
    get:
      description: Get all current attempts in the Database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get all Attempts
  /tutorials/code/attempt/{qnid}:
    get:
      description: get Attempt from Db filtered by username and qnid
      parameters:
      - description: qnid
        in: path
        name: qnid
        required: true
        type: string
      - description: username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get Attempt
    post:
      description: Creating Attempt
      parameters:
      - description: attempt
        in: body
        name: Attempt
        required: true
        schema:
          $ref: '#/definitions/requests.CreateAttemptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Save Attempt
    put:
      description: Edit attempt's data in Db.
      parameters:
      - description: attempt
        in: body
        name: Attempt
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateAttemptRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Edit Attempt
  /tutorials/code/create:
    post:
      description: Creating a Question
      parameters:
      - description: question
        in: body
        name: Question
        required: true
        schema:
          $ref: '#/definitions/requests.CreateQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: 'By Admin only: Create Tutorial Question'
  /user:
    post:
      description: Creating a User Data in MongoDB. UserName as Key
      parameters:
      - description: user
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUsersRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Create User/ Sign Up for account
  /user/{userId}:
    delete:
      description: Delete User from Db.
      parameters:
      - description: userId
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.GetUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Delete User
    put:
      description: Edit user's data in Db.
      parameters:
      - description: user
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.EditUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Edit User
  /user/{userName}:
    get:
      description: get a user data from Db. Checks both username and Password
      parameters:
      - description: username, password
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.GetUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get User / login
  /user/login:
    post:
      description: Authenticate a user by username and password
      parameters:
      - description: username, password
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/requests.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.UserResponse'
      summary: User Login
  /users:
    get:
      description: Get all current users in my Database.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/responses.Response'
      summary: Get all Users
swagger: "2.0"
